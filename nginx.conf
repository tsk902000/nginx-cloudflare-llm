worker_processes 1;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'req_id=$request_id rt=$request_time';

    access_log /dev/stdout detailed;

    client_body_buffer_size 16m;
    client_max_body_size 32m;

    upstream llm_backend {
        server 192.168.1.188:30000;
    }

    server {
        listen 80 default_server;
        server_name _;

        # Regular requests
        location / {
            proxy_pass http://llm_backend;
            proxy_read_timeout 600s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Special handler for chat completions
        location = /chat/completions {
            content_by_lua_block {
                local cjson = require("cjson")
                local req_id = ngx.var.request_id or ngx.time() .. "-" .. math.random(1000, 9999)
                ngx.log(ngx.INFO, "[", req_id, "] Handling chat completions request")

                -- Read request body
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                if not body then
                    local file_name = ngx.req.get_body_file()
                    if file_name then
                        local file = io.open(file_name, "rb")
                        if file then
                            body = file:read("*a")
                            file:close()
                        end
                    end
                end

                -- Detect streaming mode
                local is_streaming = false
                local json_body = nil
                if body then
                    local ok, parsed_json = pcall(function() return cjson.decode(body) end)
                    if ok and parsed_json then
                        json_body = parsed_json
                        if parsed_json.stream == true then
                            is_streaming = true
                        end
                    end
                end
                local args = ngx.req.get_uri_args()
                if args.stream == "true" or args.stream == "1" then
                    is_streaming = true
                end

                -- IDs
                local completion_id = "chatcmpl-" .. ngx.time() .. req_id:sub(1, 6)
                local timestamp = ngx.time()
                local model = json_body and json_body.model or "unknown-model"

                -- Keepalive logic
                local keepalive_counter = 0
                local keepalive_interval = 10

                local function send_keepalive()
                    keepalive_counter = keepalive_counter + 1
                    if is_streaming then
                        local keep_chunk = {
                            id = completion_id,
                            object = "chat.completion.chunk",
                            created = timestamp,
                            model = model,
                            choices = {{
                                index = 0,
                                delta = {},
                                finish_reason = nil
                            }}
                        }
                        local ok = pcall(function()
                            ngx.say("data: " .. cjson.encode(keep_chunk) .. "\n")
                            ngx.flush(true)
                        end)
                        ngx.log(ngx.INFO, "[", req_id, "] Sent keepalive #", keepalive_counter, " (streaming)")
                        return ok
                    else
                        local keep_response = {
                            id = completion_id,
                            object = "chat.completion.update",
                            created = timestamp,
                            model = model,
                            status = "processing",
                            progress = keepalive_counter * 10,
                            choices = {{
                                index = 0,
                                message = {
                                    role = "assistant",
                                    content = ""
                                },
                                finish_reason = nil
                            }}
                        }
                        local ok = pcall(function()
                            ngx.say(cjson.encode(keep_response))
                            ngx.flush(true)
                        end)
                        ngx.log(ngx.INFO, "[", req_id, "] Sent keepalive #", keepalive_counter, " (non-streaming)")
                        return ok
                    end
                end

                -- Send initial response
                local client_connected = true
                if is_streaming then
                    ngx.header.content_type = "text/event-stream"
                    ngx.header["Cache-Control"] = "no-cache"
                    ngx.header["Connection"] = "keep-alive"
                    local initial_chunk = {
                        id = completion_id,
                        object = "chat.completion.chunk",
                        created = timestamp,
                        model = model,
                        choices = {{
                            index = 0,
                            delta = { role = "assistant" },
                            finish_reason = nil
                        }}
                    }
                    local ok = pcall(function()
                        ngx.say("data: " .. cjson.encode(initial_chunk) .. "\n")
                        ngx.flush(true)
                    end)
                    if not ok then
                        ngx.log(ngx.INFO, "[", req_id, "] Client disconnected during initial response")
                        client_connected = false
                    end
                else
                    ngx.header.content_type = "application/json"
                    local initial_response = {
                        id = completion_id,
                        object = "chat.completion",
                        created = timestamp,
                        model = model,
                        choices = {{
                            index = 0,
                            message = {
                                role = "assistant",
                                content = ""
                            },
                            finish_reason = "loading"
                        }},
                        usage = {
                            prompt_tokens = 0,
                            completion_tokens = 0,
                            total_tokens = 0
                        }
                    }
                    local ok = pcall(function()
                        ngx.say(cjson.encode(initial_response))
                        ngx.flush(true)
                    end)
                    if not ok then
                        ngx.log(ngx.INFO, "[", req_id, "] Client disconnected during initial response")
                        client_connected = false
                    end
                end

                if not client_connected then
                    return
                end

                -- Connect to backend
                ngx.log(ngx.INFO, "[", req_id, "] Forwarding to backend")
                local socket = ngx.socket.tcp()
                socket:settimeout(10000)  -- 10 second timeout
                local ok, err = socket:connect("192.168.1.188", 30000)
                if not ok then
                    ngx.log(ngx.ERR, "[", req_id, "] Failed to connect to backend: ", err)
                    send_keepalive()
                    return
                end

                -- Build request
                local request = "POST /chat/completions HTTP/1.1\r\n"
                request = request .. "Host: " .. ngx.var.host .. "\r\n"
                request = request .. "Content-Length: " .. #body .. "\r\n"
                request = request .. "Content-Type: application/json\r\n"
                request = request .. "Connection: close\r\n"
                local headers = ngx.req.get_headers()
                for k, v in pairs(headers) do
                    if k ~= "content-length" and k ~= "host" and k ~= "connection" then
                        request = request .. k .. ": " .. v .. "\r\n"
                    end
                end
                request = request .. "\r\n" .. body

                local bytes, err = socket:send(request)
                if not bytes then
                    ngx.log(ngx.ERR, "[", req_id, "] Failed to send request to backend: ", err)
                    send_keepalive()
                    socket:close()
                    return
                end

                -- Read response headers
                local line, err = socket:receive("*l")
                if not line then
                    ngx.log(ngx.ERR, "[", req_id, "] Failed to receive response from backend: ", err)
                    send_keepalive()
                    socket:close()
                    return
                end
                local status_code = tonumber(string.match(line, "HTTP/%d%.%d (%d+)"))
                local header_body_separator_found = false
                local content_length = nil
                local transfer_encoding = nil
                while not header_body_separator_found do
                    line, err = socket:receive("*l")
                    if not line then break end
                    local cl = line:match("^[Cc]ontent%-[Ll]ength:%s*(%d+)")
                    if cl then content_length = tonumber(cl) end
                    local te = line:match("^[Tt]ransfer%-[Ee]ncoding:%s*(.+)")
                    if te then transfer_encoding = te:lower() end
                    if line == "" then header_body_separator_found = true end
                end

                -- Passthrough with keepalive
                local function passthrough_with_keepalive(socket, transfer_encoding, content_length, keepalive_interval, send_keepalive_func)
                    local last_keepalive = ngx.now()
                    local total_received = 0
                    local client_connected = true

                    if transfer_encoding and transfer_encoding:find("chunked") then
                        while true do
                            socket:settimeout(1000)
                            local chunk_size_line, err = socket:receive("*l")
                            if not chunk_size_line then
                                if err == "timeout" then
                                    if ngx.now() - last_keepalive >= keepalive_interval then
                                        client_connected = send_keepalive_func()
                                        last_keepalive = ngx.now()
                                        if not client_connected then break end
                                    end
                                else
                                    break
                                end
                            else
                                local chunk_size = tonumber(chunk_size_line, 16)
                                if not chunk_size or chunk_size == 0 then break end
                                local chunk_data = socket:receive(chunk_size)
                                socket:receive(2) -- trailing \r\n
                                if chunk_data and #chunk_data > 0 then
                                    ngx.print(chunk_data)
                                    ngx.flush(true)
                                    total_received = total_received + #chunk_data
                                end
                            end
                        end
                    elseif content_length then
                        local remaining = content_length
                        while remaining > 0 do
                            socket:settimeout(1000)
                            local chunk = math.min(8192, remaining)
                            local data, err, partial = socket:receive(chunk)
                            if data and #data > 0 then
                                ngx.print(data)
                                ngx.flush(true)
                                remaining = remaining - #data
                                total_received = total_received + #data
                            elseif partial and #partial > 0 then
                                ngx.print(partial)
                                ngx.flush(true)
                                remaining = remaining - #partial
                                total_received = total_received + #partial
                            elseif err == "timeout" then
                                if ngx.now() - last_keepalive >= keepalive_interval then
                                    client_connected = send_keepalive_func()
                                    last_keepalive = ngx.now()
                                    if not client_connected then break end
                                end
                            else
                                break
                            end
                        end
                    else
                        while true do
                            socket:settimeout(1000)
                            local data, err, partial = socket:receive(8192)
                            if data and #data > 0 then
                                ngx.print(data)
                                ngx.flush(true)
                                total_received = total_received + #data
                            elseif partial and #partial > 0 then
                                ngx.print(partial)
                                ngx.flush(true)
                                total_received = total_received + #partial
                            elseif err == "timeout" then
                                if ngx.now() - last_keepalive >= keepalive_interval then
                                    client_connected = send_keepalive_func()
                                    last_keepalive = ngx.now()
                                    if not client_connected then break end
                                end
                            else
                                break
                            end
                        end
                    end
                    return total_received, client_connected
                end

                local received, client_connected = passthrough_with_keepalive(
                    socket,
                    transfer_encoding,
                    content_length,
                    keepalive_interval,
                    send_keepalive
                )

                socket:close()
                ngx.log(ngx.INFO, "[", req_id, "] Request completed, bytes received: ", received)
            }
        }
    }
}